{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nlet DashboardViewComponent = class DashboardViewComponent {\n  selectedRole = 'Admin'; // default role\n  dropdownOpen = false;\n  showModal = false;\n  tasks = [{\n    id: 1,\n    title: 'Design UI Layout',\n    category: 'Work',\n    status: 'Completed'\n  }, {\n    id: 2,\n    title: 'Fix Login Flow',\n    category: 'Development',\n    status: 'Pending'\n  }, {\n    id: 3,\n    title: 'Team Sync',\n    category: 'Meetings',\n    status: 'Not Started'\n  }];\n  newTask = {\n    title: '',\n    category: '',\n    status: 'Pending'\n  };\n  // ✅ Role-based logic\n  canEdit() {\n    return this.selectedRole === 'Admin' || this.selectedRole === 'Editor';\n  }\n  canDelete() {\n    return this.selectedRole === 'Admin';\n  }\n  // ✅ Role dropdown\n  toggleDropdown() {\n    this.dropdownOpen = !this.dropdownOpen;\n  }\n  setRole(role) {\n    this.selectedRole = role;\n    this.dropdownOpen = false;\n  }\n  logout() {\n    // Your logout logic here\n  }\n  // ✅ Modal actions\n  openModal() {\n    this.showModal = true;\n    this.newTask = {\n      title: '',\n      category: '',\n      status: 'Pending'\n    };\n  }\n  closeModal() {\n    this.showModal = false;\n  }\n  saveTask() {\n    const newId = this.tasks.length + 1;\n    this.tasks.push({\n      id: newId,\n      ...this.newTask\n    });\n    this.closeModal();\n  }\n  // ✅ Status badge styling\n  getStatusClass(status) {\n    switch (status) {\n      case 'Completed':\n        return 'bg-green-100 text-green-700';\n      case 'Pending':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'Not Started':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  }\n};\nDashboardViewComponent = __decorate([Component({\n  selector: 'app-dashboard-view',\n  standalone: true,\n  // ✅ Make sure this is present\n  imports: [CommonModule, FormsModule],\n  // ✅ Import FormsModule here\n  templateUrl: './dashboard-view.component.html',\n  styleUrls: ['./dashboard-view.component.css']\n})], DashboardViewComponent);\nexport { DashboardViewComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}