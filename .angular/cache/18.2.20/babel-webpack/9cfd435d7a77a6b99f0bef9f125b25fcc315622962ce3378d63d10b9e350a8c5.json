{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport { CreateEditDialogComponent } from './create-edit-dialog/create-edit-dialog';\nimport { ConfirmDeleteDialogComponent } from './confirm-delete/confirm-delete-dialog';\nlet DashboardViewComponent = class DashboardViewComponent {\n  http;\n  selectedRole = 'Viewer';\n  tasks = [];\n  showModal = false;\n  dropdownOpen = false;\n  newTask = {\n    id: null,\n    title: '',\n    category: '',\n    status: 'Not Started'\n  };\n  taskToDelete = null;\n  showDeleteConfirm = false;\n  isEditMode = false;\n  constructor(http) {\n    this.http = http;\n  }\n  ngOnInit() {\n    const savedRole = localStorage.getItem('user_role');\n    this.selectedRole = savedRole || 'Viewer';\n    this.loadTasks();\n  }\n  getHeaders() {\n    return new HttpHeaders({\n      'x-user-role': this.selectedRole\n    });\n  }\n  loadTasks() {\n    this.http.get('/api/tasks', {\n      headers: this.getHeaders()\n    }).subscribe({\n      next: res => {\n        this.tasks = res;\n      },\n      error: err => {\n        console.error('Failed to load tasks', err);\n      }\n    });\n  }\n  canEdit() {\n    return this.selectedRole === 'Admin' || this.selectedRole === 'Owner';\n  }\n  canDelete() {\n    return this.selectedRole === 'Admin';\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case 'Completed':\n        return 'bg-green-100 text-green-700';\n      case 'Pending':\n        return 'bg-yellow-100 text-yellow-700';\n      case 'Not Started':\n        return 'bg-gray-100 text-gray-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  }\n  setRole(role) {\n    this.selectedRole = role;\n    localStorage.setItem('user_role', role);\n    this.loadTasks();\n  }\n  logout() {\n    localStorage.removeItem('user_role');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  createTask() {\n    this.showModal = true;\n    this.isEditMode = false;\n    this.newTask = {\n      id: null,\n      title: '',\n      category: '',\n      status: 'Not Started'\n    };\n  }\n  editTask(task) {\n    this.showModal = true;\n    this.isEditMode = true;\n    this.newTask = {\n      ...task\n    };\n  }\n  closeModal() {\n    this.showModal = false;\n  }\n  saveTask() {\n    if (this.newTask.title && this.newTask.category) {\n      const method = this.isEditMode ? this.http.patch(`/api/tasks/${this.newTask.id}`, this.newTask, {\n        headers: this.getHeaders()\n      }) : this.http.post('/api/tasks', this.newTask, {\n        headers: this.getHeaders()\n      });\n      method.subscribe({\n        next: () => {\n          this.loadTasks();\n          this.closeModal();\n        },\n        error: err => {\n          console.error('Failed to save task', err);\n        }\n      });\n    }\n  }\n  confirmDelete(task) {\n    this.taskToDelete = task;\n    this.showDeleteConfirm = true;\n  }\n  cancelDelete() {\n    this.taskToDelete = null;\n    this.showDeleteConfirm = false;\n  }\n  deleteTask() {\n    if (!this.taskToDelete) return;\n    this.http.delete(`/api/tasks/${this.taskToDelete.id}`, {\n      headers: this.getHeaders()\n    }).subscribe({\n      next: () => {\n        this.loadTasks();\n        this.cancelDelete();\n      },\n      error: err => {\n        console.error('Failed to delete task', err);\n        this.cancelDelete();\n      }\n    });\n  }\n};\nDashboardViewComponent = __decorate([Component({\n  selector: 'app-dashboard-view',\n  standalone: true,\n  imports: [CommonModule, FormsModule, HttpClientModule, SidebarComponent, ToolbarComponent, CreateEditDialogComponent, ConfirmDeleteDialogComponent],\n  templateUrl: './dashboard-view.component.html',\n  styleUrls: ['./dashboard-view.component.css']\n})], DashboardViewComponent);\nexport { DashboardViewComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}